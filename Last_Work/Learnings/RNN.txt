#RNN ARIMA practical 6
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error
from tensorflow. keras.models import Sequential
from tensorflow. keras. layers import Dense, SimpleRNN, LSTM
from sklearn.model_selection import train_test_split
import seaborn as sns
# Load Air Passenger Dataset available on Kaggle
url = 'https://raw.githubusercontent.com/jbrownlee/Datasets/master/airline-passengers.csv'
df = pd. read_csv(url, usecols=['Passengers' ])
df.head()
# Data Preprocessing: Normalize the dataset for better performance of the neural network
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(df) # Create a function to prepare the dataset for RNN
def create_dataset(data, time_step=1):
    X, Y = [], []
    for i in range(len(data)-time_step-1):
        a = data[i: (i+time_step), 0]
        X.append(a)
        Y.append(data[i + time_step, 0])
    return np.array(X), np.array(Y)

# Prepare the dataset with a time step of 10
time_step = 10
X, Y = create_dataset(scaled_data, time_step)

# Split the data into training and test sets
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)

# Reshape the input to be [samples, time steps, features] for RNN
X_train = X_train.reshape(X_train.shape[0], X_train.shape[1], 1)
X_test = X_test.reshape(X_test. shape[0], X_test.shape[1], 1) # Build and Train the RNN Model
model = Sequential()
model.add(SimpleRNN(50, return_sequences=True, input_shape=(time_step, 1)))
model.add(SimpleRNN(50, return_sequences=False))
model.add(Dense(25))
model.add(Dense(1))
model. compile(optimizer='adam', loss='mean_squared_error')

# Train the model
model. fit(X_train, Y_train, epochs=100, batch_size=32, validation_data=(X_test, Y_test), verbose=1)


# Prediction and Evaluation
train_predict = model.predict(X_train)
test_predict = model.predict(X_test)

# Inverse transform to get the actual values
train_predict = scaler.inverse_transform(train_predict)
test_predict = scaler. inverse_transform(test_predict)
Y_train = scaler. inverse_transform([Y_train])
Y_test = scaler. inverse_transform([Y_test])

# Calculate RMSE
train_rmse = np.sqrt(mean_squared_error(Y_train[0], train_predict[:, 0]))
test_rmse = np.sqrt(mean_squared_error(Y_test[0], test_predict[:, 0]))

print(f'Train RMSE: {train_rmse}')
print(f'Test RMSE: {test_rmse}')
# Compare with a Traditional Time-Series Model (ARIMA)
from statsmodels.tsa.arima.model import ARIMA

# Fit the ARIMA model
model_arima = ARIMA(df, order=(5,1,0))
model_arima_fit = model_arima.fit()

# Forecast
arima_pred = model_arima_fit.forecast(steps=len(X_test))

# Calculate RMSE for ARIMA
arima_rmse = np.sqrt(mean_squared_error(df[-len(arima_pred):], arima_pred) )
print(f'ARIMA RMSE: {arima_rmse}')
# Visualizations: RNN Predictions vs. Actual Values
plt.figure(figsize=(12,6))

# Plot the actual data
plt.plot(df, label='Actual', color='blue')

# Plot the training predictions
plt.plot(range(time_step, time_step + len(train_predict)), train_predict, color='green', label='Train Predictions')

# Plot the testing predictions
plt.plot(range(len(df) - len(test_predict), len(df)), test_predict, color='red', label='Test Predictions' )

plt.legend()
plt.title('RNN Predictions vs. Actual')
plt.xlabel('Time')
plt.ylabel('Passengers')
plt. show()
